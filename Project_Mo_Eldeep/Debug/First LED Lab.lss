
First LED Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800088  00800088  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afd  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059f  00000000  00000000  0000185a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b8  00000000  00000000  000024f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000028af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
extern uint32 ADC_Vin_Value_mv ;

int main(void)
{
	
	PORT_Init();
  92:	0e 94 e7 00 	call	0x1ce	; 0x1ce <PORT_Init>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x4>

00000098 <__vector_1>:
{
	ptr = p;
}

ISR(INT0_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	(*ptr)();
  ba:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <ptr>
  be:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <ptr+0x1>
  c2:	09 95       	icall
}
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	7f 91       	pop	r23
  d2:	6f 91       	pop	r22
  d4:	5f 91       	pop	r21
  d6:	4f 91       	pop	r20
  d8:	3f 91       	pop	r19
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_16>:

ISR(ADC_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27

 ADC_Vin_Value_mv = (ADC_INPUT_16BIT_ACCESS * 500) / 1024;
 100:	44 b1       	in	r20, 0x04	; 4
 102:	55 b1       	in	r21, 0x05	; 5
 104:	24 ef       	ldi	r18, 0xF4	; 244
 106:	31 e0       	ldi	r19, 0x01	; 1
 108:	42 9f       	mul	r20, r18
 10a:	c0 01       	movw	r24, r0
 10c:	43 9f       	mul	r20, r19
 10e:	90 0d       	add	r25, r0
 110:	52 9f       	mul	r21, r18
 112:	90 0d       	add	r25, r0
 114:	11 24       	eor	r1, r1
 116:	89 2f       	mov	r24, r25
 118:	99 27       	eor	r25, r25
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	a0 e0       	ldi	r26, 0x00	; 0
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <ADC_Vin_Value_mv>
 126:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <ADC_Vin_Value_mv+0x1>
 12a:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <ADC_Vin_Value_mv+0x2>
 12e:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <ADC_Vin_Value_mv+0x3>
	
}
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	static uint8 OVF_INT_CNT = 0;
	OVF_INT_CNT++;
 16e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <OVF_INT_CNT.1651>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <OVF_INT_CNT.1651>
	
	if(OVF_INT_CNT == TIMER0_Number_OVRflows_g)
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <TIMER0_Number_OVRflows_g>
 182:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <TIMER0_Number_OVRflows_g+0x1>
 186:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <TIMER0_Number_OVRflows_g+0x2>
 18a:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <TIMER0_Number_OVRflows_g+0x3>
 18e:	84 17       	cp	r24, r20
 190:	95 07       	cpc	r25, r21
 192:	a6 07       	cpc	r26, r22
 194:	b7 07       	cpc	r27, r23
 196:	51 f4       	brne	.+20     	; 0x1ac <__vector_11+0x60>
	{
		(*ptr)();
 198:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <ptr>
 19c:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <ptr+0x1>
 1a0:	09 95       	icall
		OVF_INT_CNT = 0;
 1a2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <OVF_INT_CNT.1651>
		TCNT0 = TIMER0_Init_Value_g ;
 1a6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1aa:	82 bf       	out	0x32, r24	; 50
	}
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <PORT_Init>:

void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , PIN = 0 , DIR = 0;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	7e c0       	rjmp	.+252    	; 0x2ce <PORT_Init+0x100>
	{
		Port = PORT_Intialization[Cnt].PIN_NUM / NUMBER_OF_PORT_PINS ;
 1d2:	e9 2f       	mov	r30, r25
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	e0 5a       	subi	r30, 0xA0	; 160
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	28 2f       	mov	r18, r24
 1e2:	26 95       	lsr	r18
 1e4:	26 95       	lsr	r18
 1e6:	26 95       	lsr	r18
		PIN = PORT_Intialization[Cnt].PIN_NUM % NUMBER_OF_PORT_PINS ;
 1e8:	87 70       	andi	r24, 0x07	; 7
		DIR = PORT_Intialization[Cnt].DIR ;
 1ea:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(DIR)
 1ec:	33 23       	and	r19, r19
 1ee:	b9 f1       	breq	.+110    	; 0x25e <PORT_Init+0x90>
 1f0:	31 30       	cpi	r19, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <PORT_Init+0x28>
 1f4:	6b c0       	rjmp	.+214    	; 0x2cc <PORT_Init+0xfe>
		{
			case PIN_DIR_OUTPUT :
			 switch(Port)
 1f6:	21 30       	cpi	r18, 0x01	; 1
 1f8:	89 f0       	breq	.+34     	; 0x21c <PORT_Init+0x4e>
 1fa:	28 f0       	brcs	.+10     	; 0x206 <PORT_Init+0x38>
 1fc:	22 30       	cpi	r18, 0x02	; 2
 1fe:	c9 f0       	breq	.+50     	; 0x232 <PORT_Init+0x64>
 200:	23 30       	cpi	r18, 0x03	; 3
 202:	11 f1       	breq	.+68     	; 0x248 <PORT_Init+0x7a>
 204:	63 c0       	rjmp	.+198    	; 0x2cc <PORT_Init+0xfe>
			 {
				 case 0 :
				   SET_BIT(DDRA , PIN);
 206:	4a b3       	in	r20, 0x1a	; 26
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <PORT_Init+0x44>
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	8a 95       	dec	r24
 214:	e2 f7       	brpl	.-8      	; 0x20e <PORT_Init+0x40>
 216:	24 2b       	or	r18, r20
 218:	2a bb       	out	0x1a, r18	; 26
				 break;
 21a:	58 c0       	rjmp	.+176    	; 0x2cc <PORT_Init+0xfe>
				 case 1 :
				  SET_BIT(DDRB , PIN);
 21c:	47 b3       	in	r20, 0x17	; 23
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <PORT_Init+0x5a>
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	8a 95       	dec	r24
 22a:	e2 f7       	brpl	.-8      	; 0x224 <PORT_Init+0x56>
 22c:	24 2b       	or	r18, r20
 22e:	27 bb       	out	0x17, r18	; 23
				 break;
 230:	4d c0       	rjmp	.+154    	; 0x2cc <PORT_Init+0xfe>
				 case 2 :
				  SET_BIT(DDRC , PIN);
 232:	44 b3       	in	r20, 0x14	; 20
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <PORT_Init+0x70>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <PORT_Init+0x6c>
 242:	24 2b       	or	r18, r20
 244:	24 bb       	out	0x14, r18	; 20
				 break;
 246:	42 c0       	rjmp	.+132    	; 0x2cc <PORT_Init+0xfe>
				 case 3 :
				  SET_BIT(DDRD , PIN);
 248:	41 b3       	in	r20, 0x11	; 17
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <PORT_Init+0x86>
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <PORT_Init+0x82>
 258:	24 2b       	or	r18, r20
 25a:	21 bb       	out	0x11, r18	; 17
				 break;
 25c:	37 c0       	rjmp	.+110    	; 0x2cc <PORT_Init+0xfe>
			 }
			
			break;
			
			case PIN_DIR_INPUT :
			  switch(Port)
 25e:	21 30       	cpi	r18, 0x01	; 1
 260:	91 f0       	breq	.+36     	; 0x286 <PORT_Init+0xb8>
 262:	28 f0       	brcs	.+10     	; 0x26e <PORT_Init+0xa0>
 264:	22 30       	cpi	r18, 0x02	; 2
 266:	d9 f0       	breq	.+54     	; 0x29e <PORT_Init+0xd0>
 268:	23 30       	cpi	r18, 0x03	; 3
 26a:	29 f1       	breq	.+74     	; 0x2b6 <PORT_Init+0xe8>
 26c:	2f c0       	rjmp	.+94     	; 0x2cc <PORT_Init+0xfe>
			  {
				 case 0 :
				 CLR_BIT(DDRA , PIN);
 26e:	4a b3       	in	r20, 0x1a	; 26
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <PORT_Init+0xac>
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <PORT_Init+0xa8>
 27e:	20 95       	com	r18
 280:	24 23       	and	r18, r20
 282:	2a bb       	out	0x1a, r18	; 26
				 break;
 284:	23 c0       	rjmp	.+70     	; 0x2cc <PORT_Init+0xfe>
				 case 1 :
				 CLR_BIT(DDRB , PIN);
 286:	47 b3       	in	r20, 0x17	; 23
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <PORT_Init+0xc4>
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <PORT_Init+0xc0>
 296:	20 95       	com	r18
 298:	24 23       	and	r18, r20
 29a:	27 bb       	out	0x17, r18	; 23
				 break;
 29c:	17 c0       	rjmp	.+46     	; 0x2cc <PORT_Init+0xfe>
				 case 2 :
				 CLR_BIT(DDRC , PIN);
 29e:	44 b3       	in	r20, 0x14	; 20
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <PORT_Init+0xdc>
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <PORT_Init+0xd8>
 2ae:	20 95       	com	r18
 2b0:	24 23       	and	r18, r20
 2b2:	24 bb       	out	0x14, r18	; 20
				 break;
 2b4:	0b c0       	rjmp	.+22     	; 0x2cc <PORT_Init+0xfe>
				 case 3 :
				 CLR_BIT(DDRD , PIN);
 2b6:	41 b3       	in	r20, 0x11	; 17
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <PORT_Init+0xf4>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	8a 95       	dec	r24
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <PORT_Init+0xf0>
 2c6:	20 95       	com	r18
 2c8:	24 23       	and	r18, r20
 2ca:	21 bb       	out	0x11, r18	; 17

void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , PIN = 0 , DIR = 0;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	94 31       	cpi	r25, 0x14	; 20
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <PORT_Init+0x106>
 2d2:	7f cf       	rjmp	.-258    	; 0x1d2 <PORT_Init+0x4>
			
			default:
			break;
		}
	}
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
